Implement a simple queue in python, O(1) push and get


class my_queue:
	Def __init__(self):
		Self._container = list()
		Self._start = -1;

	Def push(self, element):
		self._container.append(element)
		Self._start = 0

	Def get(self):
		Ret_elem = self._container[self._start]
		Self._start += 1
		Return ret_elem

From collections import deque
class my_queue:
	Def __init__(self):
		Self._container = deque()

	Def push(self, element):
		self._container.append(element)

	Def get(self):
		Return self._container.popleft()

2. Least recently used cache

From collections import OrderedDict
Class LRUCache:
	Def __init__(self, k):
		Self._container = OrderedDict()
		Self._k = k

	Def put(self, key, value):
		Self._container[key] = value
		If len(self._container) > self._k:
			self._container.popitem(last=False) #FIFO


	Def get(self, key):
		Try:
Return self._container[key]
Catch KeyError as exc:
	Raise KeyError(“Key does not exist”)



3.

Def fibonacci(n):
	Prev, prev_prev = 0, 1
	For i in range(2, n):
		Prev = prev_prev + prev
Prev_prev = prev
Return prev

Cache = [-1] * n
Def fibonacci(n):
	If n == 0:
		Cache[0] = 0
		Return 0
	If n== 1:
		Cache[1] = 1
		Return 1
	If cache[n] != -1:
		Return cache[n]
Cache[n] = fibonacci(n-1)+fibonacci(n-2)
Return cache[n]
